# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Api {
  liveEndpoint: String
  models: [EntityModel!]!
  mutations: [String!]!
  queries: [String!]!
  sandboxEndpoint: String
  subscriptions: [String!]!
}

type AppConfig {
  _id: ObjectId!
  appEntryComponentId: ObjectId
  description: String!
  name: String!
  variables: [AppVariable!]!
}

type AppVariable {
  _id: ObjectId!
  name: String!
  type: String!
}

type Auth {
  _id: ObjectId!
  allowUnauthenticatedUsers: Boolean!
  clientRefreshTokenValidity: Float!
  defaultPasswordPolicy: Boolean!
  emailVerificationMessage: String!
  emailVerificationSubject: String!
  mfaConfiguration: String!
  mfaEnabled: Boolean!
  mfaTypes: String!
  passwordFieldId: String!
  passwordPolicyMinLength: Float!
  passwordRequiresNumbers: Boolean!
  passwordRequiresSymbols: Boolean!
  passwordRequiresUppercase: Boolean!
  requiredAttributes: [String!]!
  requiresAuth: Boolean!
  smsAuthenticationMessage: String!
  smsVerificationMessage: String!
  tableId: String!
  usernameCaseSensitive: Boolean!
  usernameFieldId: String!
}

type DataAuth {
  allow: String!
  groupClaim: String!
  groups: [String!]!
  groupsField: String!
  identityClaim: String!
  operations: [String!]!
  ownerField: String!
  provider: String!
}

type DataField {
  _id: ObjectId!
  connection: Boolean
  dataType: String!
  fieldName: String!
  isHashed: Boolean!
  isList: Boolean
  isUnique: Boolean!
  keys: [Key!]!
  nullable: Boolean!
  rules: [DataAuth!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type EntityModel {
  _id: ObjectId!
  auth: [DataAuth!]!
  fields: [DataField!]!
  isLocal: Boolean!
  keys: [Key!]!
  name: String!
}

type Invitation {
  _id: ObjectId!
  acceptedDate: DateTime
  organizationId: ObjectId!
  userEmail: String!
}

type Key {
  fieldNames: [String!]!
  name: String!
}

type LoginOutputType {
  sessionId: String!
}

type Mutation {
  acceptInvitaion(invitationId: ObjectId!): Boolean!
  changePassword(newPassword: String!, oldPassword: String!): Boolean!
  createOrganization(organization: OrganizationInput!): Organization!
  createProject(project: ProjectInput!): Project!
  createUser(user: UserInput!): User!
  deleteInvitation(email: String!, organizationId: ObjectId!): Boolean!
  deleteOrganization(organizationId: ObjectId!): ObjectId!
  deleteProject(projectId: ObjectId!): ObjectId!
  forgotPassword(email: String!): Boolean!
  inviteMember(email: String!, organizationId: ObjectId!, sendInvite: Boolean): Invitation!
  login(email: String!, password: String!): LoginOutputType!
  logout: Boolean!
  register(displayName: String!, email: String!, password: String!): User!
  resetPassword(email: String!, newPassword: String!, token: String!): Boolean!
  updateMe(userInput: UserInput!): User!
  updateProject(project: UpdateProjectInput!, projectId: ObjectId!): Project!
  updateServerVersion(projectId: ObjectId!, sandbox: Boolean!, serverConfigId: ObjectId!, version: String!): Boolean!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Organization {
  _id: ObjectId!
  avatar: String
  invitees: Invitation!
  isPersonal: Boolean!
  members: [User!]!
  name: String!
  owner: User!
  teams: [Team!]!
  urlSlug: String!
}

input OrganizationInput {
  name: String!
}

type Project {
  _id: ObjectId!
  appConfig: [AppConfig!]!
  appId: String!
  organization: Organization!
  projectName: String!
  serverConfig: [ServerConfig!]!
  teams: [Team!]!
  users: [User!]!
}

input ProjectInput {
  organizationId: ObjectId!
  projectDescription: String!
  projectName: String!
}

type Query {
  getDockerhubVersions(projectId: ObjectId!, serverConfigId: ObjectId!): [String!]!
  getProject(projectId: ObjectId!): Project!
  invitation(invitationId: ObjectId!): Invitation!
  listOrganizations: [Organization!]!
  listProjects: [Project!]!
  me: User
  serverVersionNumber: String
}

type ServerConfig {
  _id: ObjectId!
  apiConfig: Api!
  authConfig: Auth!
  description: String!
  ec2InstanceId: String
  ec2PublicDns: String
  name: String!
  version: String!
}

type Team {
  _id: ObjectId!
  members: [User!]!
  name: String!
  owner: User!
}

input UpdateProjectInput {
  projectName: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: ObjectId!
  avatar: String
  displayName: String
  email: String!
  favorites: [ObjectId!]!
  hidden: [ObjectId!]!
  invitations: [Invitation!]!
  lastLogin: DateTime
  organizations: [Organization!]!
  resetPasswordToken: String!
  status: String!
  userRole: String!
}

input UserInput {
  avatar: String
  displayName: String
  email: String
  favorites: [ObjectId!]
  fullName: String
  hidden: [ObjectId!]
  removeAvatar: Boolean
  uploadFile: Upload
}
